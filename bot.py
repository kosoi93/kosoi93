import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API
import time  # –î–ª—è –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
import logging  # –î–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ –æ—à–∏–±–∫–∞—Ö
from telegram import Bot  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º
from datetime import datetime, timedelta  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
from deep_translator import GoogleTranslator  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = '7678223152:AAEi1VA2s0XPVF8yVrnAXxpd4sya4cLAZgA'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
CHANNEL_ID = '-1002325539147'  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
API_KEY = 'fe7c40b8ed162413752d2b98fe4bac479ad1c6a56c62a5b93d113e9f3d31698b'  # –ö–ª—é—á API CryptoCompare
CRYPTO_API_URL = f'https://min-api.cryptocompare.com/data/v2/news/?lang=EN&api_key={API_KEY}'  # URL API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot = Bot(token=BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
last_published_time = datetime.utcnow() - timedelta(minutes=5)  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
pending_news = []

def fetch_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å CryptoCompare."""
    try:
        response = requests.get(CRYPTO_API_URL)  # –ó–∞–ø—Ä–æ—Å –∫ API
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        news_data = response.json().get('Data', [])  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        return news_data
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

def filter_new_news(news_list):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
    global last_published_time
    new_news = []
    for article in news_list:
        published_time = datetime.utcfromtimestamp(article['published_on'])  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
        if published_time > last_published_time:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ–≤–µ–µ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å
            new_news.append(article)
            last_published_time = max(last_published_time, published_time)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    return new_news

def translate_text(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."""
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return text  # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª

def determine_icon(title_ru):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    title_lower = title_ru.lower()
    if any(keyword in title_lower for keyword in ['meta', 'facebook', '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', 'whatsapp']):
        return '‚ìÇÔ∏è'
    elif any(keyword in title_lower for keyword in ['–±–∏—Ç–∫–æ–∏–Ω', 'ethereum', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'bitcoin', '—ç—Ñ–∏—Ä–∏—É–º']):
        return 'ü™ô'
    elif any(keyword in title_lower for keyword in ['–≤–∑–ª–æ–º', '—Ö–∞–∫–µ—Ä', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'defi']):
        return 'üö®'
    else:
        return 'üì∞'

def send_single_news(news):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    title = news['title']  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    title_ru = translate_text(title)
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
    icon = determine_icon(title_ru)
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
    message = f"{icon} {title_ru.strip()}\n\n@Inchainlive"

    try:
        bot.send_message(chat_id=CHANNEL_ID, text=message)
        logging.info("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        time.sleep(5)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        time.sleep(10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –æ–¥–Ω–æ–π."""
    global pending_news
    while True:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news_list = fetch_news()
        new_news = filter_new_news(news_list)
        if new_news:
            pending_news.extend(new_news)
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_news)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç: {len(pending_news)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ –æ–¥–Ω–æ–π
            while pending_news:
                single_news = pending_news.pop(0)
                send_single_news(single_news)
        else:
            logging.info("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

if __name__ == '__main__':
    main()
